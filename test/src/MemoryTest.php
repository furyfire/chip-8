<?php

namespace furyfire\chip8;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-05 at 14:33:38.
 */
class MemoryTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Memory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Memory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers furyfire\chip8\Memory::__construct()
     */
    public function testConstruct()
    {
        $obj = new Memory;
        $mem = $obj->getMemory(0, sizeof(Memory::$sprites));
        $this->assertEquals(Memory::$sprites, $mem, "Check object is created and memory is filled with sprite data");
    }
    /**
     * @covers furyfire\chip8\Memory::setMemory
     */
    public function testSetMemory()
    {
        $testbuf = array(0x01, 0x02, 0x03, 0x04);

        $this->object->setMemory(0x200, array(0,0,0,0));
        $result = $this->object->getMemory(0x200, 4);
        $this->assertEquals(array(0,0,0,0), $result, "Adr: 0x200, Length: 0");

        $this->object->setMemory(0x210, $testbuf);
        $result = $this->object->getMemory(0x210, sizeof($testbuf));
        $this->assertEquals($testbuf, $result, "Adr: 0x210, Length: 4");
    }

    /**
     * @covers furyfire\chip8\Memory::getMemory
     * @todo   Implement testGetMemory().
     */
    public function testGetMemory()
    {
        $testbuf = array(0x01, 0x02, 0x03, 0x04);

        $this->object->setMemory(0x200, array(0,0,0,0));
        $result = $this->object->getMemory(0x200, 4);
        $this->assertEquals(array(0,0,0,0), $result, "Adr: 0x200, Length: 0");

        $this->object->setMemory(0x210, $testbuf);
        $result = $this->object->getMemory(0x210, sizeof($testbuf));
        $this->assertEquals($testbuf, $result, "Adr: 0x210, Length: 4");
    }

    /**
     * @covers furyfire\chip8\Memory::getByte
     */
    public function testGetByte()
    {
        $address = rand(0, 0x1000-1);
        $this->object->setByte($address, 0x01);
        $result = $this->object->getByte($address);
        $this->assertEquals(0x01, $result, "Writing and reading to a random address");
    }

    /**
     * @covers furyfire\chip8\Memory::setByte
     */
    public function testSetByte()
    {
        $address = rand(0, 0x1000-1);
        $this->object->setByte($address, 0x01);
        $result = $this->object->getByte($address);
        $this->assertEquals(0x01, $result, "Writing and reading to a random address");
    }

    /**
     * @covers furyfire\chip8\Memory::getInstruction
     * @todo   Implement testGetInstruction().
     */
    public function testGetInstruction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

}
