<?php

namespace furyfire\chip8;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-05 at 14:16:17.
 */
class HelpersTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Helpers
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Helpers;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers furyfire\chip8\Helpers::validateAddress
     */
    public function testValidateAddress()
    {
        //Should succeed
        $this->assertTrue(Helpers::validateAddress(0x00), "Address 0x00");
        $this->assertTrue(Helpers::validateAddress(0x01), "Address 0x01");
        $this->assertTrue(Helpers::validateAddress(0xFFF), "Address 0xFFF");

        //Out of range
        $this->assertFalse(Helpers::validateAddress(-1), "Address -1");
        $this->assertFalse(Helpers::validateAddress(0x1000), "Address 0x1000");
        $this->assertFalse(Helpers::validateAddress(0x4000), "Address 0x4000");

        //Wrong types
        $this->assertFalse(Helpers::validateAddress("100"), "String");
        $this->assertFalse(Helpers::validateAddress(array(0x100)), "Array");
        $this->assertFalse(Helpers::validateAddress(true), "Boolean");

    }

    /**
     * @covers furyfire\chip8\Helpers::validateByte
     */
    public function testValidateByte()
    {
        //Should succeed
        $this->assertTrue(Helpers::validateByte(0x00), "Value 0x00");
        $this->assertTrue(Helpers::validateByte(0x01), "Value 0x01");
        $this->assertTrue(Helpers::validateByte(0xFF), "Value 0xFFF");

        //Out of range
        $this->assertFalse(Helpers::validateByte(-1), "Value -1");
        $this->assertFalse(Helpers::validateByte(0x100), "Value 0x1000");
        $this->assertFalse(Helpers::validateByte(0x4000), "Value 0x4000");

        //Wrong types
        $this->assertFalse(Helpers::validateByte("100"), "String");
        $this->assertFalse(Helpers::validateByte(array(100)), "Array");
        $this->assertFalse(Helpers::validateByte(true), "Boolean");
    }

    /**
     * @covers furyfire\chip8\Helpers::validateRegister
     */
    public function testValidateRegister()
    {
        //Should succeed
        $this->assertTrue(Helpers::validateRegister(0), "Reg 0");
        $this->assertTrue(Helpers::validateRegister(1), "Reg 1");
        $this->assertTrue(Helpers::validateRegister(15), "Reg 15");

        //Out of range
        $this->assertFalse(Helpers::validateRegister(-1), "Reg -1");
        $this->assertFalse(Helpers::validateRegister(16), "Reg 16");
        $this->assertFalse(Helpers::validateRegister(0x4000), "Reg 0x4000");

        //Wrong types
        $this->assertFalse(Helpers::validateRegister("10"), "String");
        $this->assertFalse(Helpers::validateRegister(array(10)), "Array");
        $this->assertFalse(Helpers::validateRegister(true), "Boolean");
    }

    /**
     * @covers furyfire\chip8\Helpers::validateInstruction
     * @todo   Implement testValidateInstruction().
     */
    public function testValidateInstruction()
    {
        //Should succeed
        $this->assertTrue(Helpers::validateInstruction(0x00), "Instruction 0x00");
        $this->assertTrue(Helpers::validateInstruction(0x01), "Instruction 0x01");
        $this->assertTrue(Helpers::validateInstruction(0xFFFF), "Instruction 0xFFF");

        //Out of range
        $this->assertFalse(Helpers::validateInstruction(-1), "Instruction -1");
        $this->assertFalse(Helpers::validateInstruction(0x10000), "Instruction 0x10000");
        $this->assertFalse(Helpers::validateInstruction(0x40000), "Instruction 0x40000");

        //Wrong types
        $this->assertFalse(Helpers::validateInstruction("100"), "String");
        $this->assertFalse(Helpers::validateInstruction(array(0x100)), "Array");
        $this->assertFalse(Helpers::validateInstruction(true), "Boolean");
    }

    /**
     * @covers furyfire\chip8\Helpers::validateKey
     * @todo   Implement testValidateKey().
     */
    public function testValidateKey()
    {
        //Should succeed
        $this->assertTrue(Helpers::validateKey(0), "Key 0");
        $this->assertTrue(Helpers::validateKey(1), "Key 1");
        $this->assertTrue(Helpers::validateKey(15), "Key 15");

        //Out of range
        $this->assertFalse(Helpers::validateKey(-1), "Key -1");
        $this->assertFalse(Helpers::validateKey(16), "Key 16");
        $this->assertFalse(Helpers::validateKey(0x4000), "Key 0x4000");

        //Wrong types
        $this->assertFalse(Helpers::validateKey("10"), "String");
        $this->assertFalse(Helpers::validateKey(array(10)), "Array");
        $this->assertFalse(Helpers::validateKey(true), "Boolean");
    }

}
